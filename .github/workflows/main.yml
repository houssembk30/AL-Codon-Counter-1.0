name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10, 3.11]
        arch: [x64, x32, arm64, armhf]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python for x64 and arm64
      if: matrix.arch != 'x32' && matrix.arch != 'armhf'
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python for x32 on Windows
      if: matrix.os == 'windows-latest' && matrix.arch == 'x32'
      run: |
        choco install python --version=${{ matrix.python-version }} --x86
        python -m pip install --upgrade pip

    - name: Install dependencies for x32 on Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x32'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y python${{ matrix.python-version }}:i386
        sudo ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python3
        python3 -m pip install --upgrade pip

    - name: Install dependencies for arm64 on Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y python${{ matrix.python-version }}
        sudo ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python3
        python3 -m pip install --upgrade pip

    - name: Install dependencies for armhf on Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'armhf'
      run: |
        sudo dpkg --add-architecture armhf
        sudo apt-get update
        sudo apt-get install -y python${{ matrix.python-version }}:armhf
        sudo ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python3
        python3 -m pip install --upgrade pip

    - name: Install dependencies for arm64 on macOS
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      run: |
        brew install python@${{ matrix.python-version }}
        python${{ matrix.python-version }} -m pip install --upgrade pip

    - name: Install dependencies
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Build executable for Windows
    - name: Build executable for Windows
      if: matrix.os == 'windows-latest'
      run: |
        pip install pyinstaller
        if [ -f AL_CODON_APP.spec ]; then pyinstaller AL_CODON_APP.spec; else pyinstaller --onefile --windowed --name AL_CODON_APP interface_AL_Counter.py; fi
        # Run Inno Setup to create the installer
        innosetup-compiler AL_CODON_APP.iss

    # Build executable for macOS
    - name: Build executable for macOS
      if: matrix.os == 'macos-latest'
      run: |
        chmod +x build_mac.sh
        ./build_mac.sh

    # Build executable for Linux
    - name: Build executable for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        chmod +x build_linux.sh
        ./build_linux.sh

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: built-application-${{ matrix.os }}-${{ matrix.arch }}-python-${{ matrix.python-version }}
        path: |
          dist/*
          build/*.run
          build/*.pkg
