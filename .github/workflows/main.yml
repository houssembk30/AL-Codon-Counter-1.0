name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10, 3.11]
        architecture: [x64, x32, arm64, armhf]
        exclude:
          - os: macos-latest
            architecture: x32
          - os: macos-latest
            architecture: armhf
          - python-version: 3.1
          - os: macos-latest
            python-version: 3.6
            architecture: arm64
          - os: macos-latest
            python-version: 3.6
            architecture: x64
          - os: macos-latest
            python-version: 3.7
            architecture: arm64
          - os: macos-latest
            python-version: 3.7
            architecture: x64
          - os: macos-latest
            python-version: 3.11
            architecture: x64
          - os: macos-latest
            python-version: 3.8
            architecture: arm64
          - os: macos-latest
            python-version: 3.8
            architecture: x64
          - os: macos-latest
            python-version: 3.9
            architecture: arm64
          - os: macos-latest
            python-version: 3.9
            architecture: x64
          - os: ubuntu-latest
            python-version: 3.11
            architecture: arm64
          - os: ubuntu-latest
            python-version: 3.11
            architecture: armhf
          - os: ubuntu-latest
            python-version: 3.11
            architecture: x32
          - os: ubuntu-latest
            python-version: 3.6
            architecture: x32
          - os: ubuntu-latest
            python-version: 3.6
            architecture: armhf
          - os: ubuntu-latest
            python-version: 3.6
            architecture: x64
          - os: ubuntu-latest
            python-version: 3.6
            architecture: arm64
          - os: ubuntu-latest
            python-version: 3.7
            architecture: arm64
          - os: ubuntu-latest
            python-version: 3.8
            architecture: arm64
          - os: ubuntu-latest
            python-version: 3.8
            architecture: x32
          - os: ubuntu-latest
            python-version: 3.8
            architecture: armhf
          - os: ubuntu-latest
            python-version: 3.7
            architecture: armhf
          - os: ubuntu-latest
            python-version: 3.7
            architecture: x32
          - os: ubuntu-latest
            python-version: 3.7
            architecture: x64
          - os: ubuntu-latest
            python-version: 3.9
            architecture: arm64
          - os: ubuntu-latest
            python-version: 3.9
            architecture: armhf
          - os: ubuntu-latest
            python-version: 3.9
            architecture: x32
          - os: ubuntu-latest
            python-version: 3.9
            architecture: x64
          - os: windows-latest
            python-version: 3.6
            architecture: armhf
          - os: windows-latest
            python-version: 3.6
            architecture: arm64
          - os: windows-latest
            python-version: 3.6
            architecture: x64
          - os: windows-latest
            python-version: 3.6
            architecture: x32
          - os: windows-latest
            python-version: 3.7
            architecture: arm64
          - os: windows-latest
            python-version: 3.7
            architecture: armhf
          - os: windows-latest
            python-version: 3.7
            architecture: x64
          - os: windows-latest
            python-version: 3.7
            architecture: x32
          - os: windows-latest
            python-version: 3.8
            architecture: arm64
          - os: windows-latest
            python-version: 3.8
            architecture: armhf
          - os: windows-latest
            python-version: 3.8
            architecture: x64
          - os: windows-latest
            python-version: 3.8
            architecture: x32
          - os: windows-latest
            python-version: 3.9
            architecture: arm64
          - os: windows-latest
            python-version: 3.9
            architecture: armhf
          - os: windows-latest
            python-version: 3.9
            architecture: x64
          - os: windows-latest
            python-version: 3.9
            architecture: x32
          - os: macos-latest
            python-version: 3.11
            architecture: arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python for x64 and arm64
      if: matrix.architecture != 'x32' && matrix.architecture != 'armhf'
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python for x32 on Windows
      if: matrix.os == 'windows-latest' && matrix.architecture == 'x32'
      run: |
        choco install python --version=${{ matrix.python-version }} --x86
        python -m pip install --upgrade pip

    - name: Install dependencies for x32 on Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.architecture == 'x32'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y python${{ matrix.python-version }}:i386
        sudo ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python3
        python3 -m pip install --upgrade pip

    - name: Install dependencies for arm64 on Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.architecture == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y python${{ matrix.python-version }}:arm64
        sudo ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python3
        python3 -m pip install --upgrade pip

    - name: Install dependencies for armhf on Ubuntu
      if: matrix.os == 'ubuntu-latest' && matrix.architecture == 'armhf'
      run: |
        sudo dpkg --add-architecture armhf
        sudo apt-get update
        sudo apt-get install -y python${{ matrix.python-version }}:armhf
        sudo ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python3
        python3 -m pip install --upgrade pip

    - name: Install dependencies for macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install openblas gcc qt cmake unar
        brew link --force qt
        export PATH="/opt/homebrew/opt/qt/bin:$PATH"
        export PKG_CONFIG_PATH="/opt/homebrew/opt/qt/lib/pkgconfig"
        brew install python@${{ matrix.python-version }}
        python${{ matrix.python-version }} -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then python${{ matrix.python-version }} -m pip install -r requirements.txt; fi
        export LDFLAGS="-L/opt/homebrew/opt/openblas/lib"
        export CPPFLAGS="-I/opt/homebrew/opt/openblas/include"
        export PATH="/opt/homebrew/opt/gcc/bin:$PATH"
        export MACOSX_DEPLOYMENT_TARGET="10.15"
        export QMAKE=/opt/homebrew/opt/qt/bin/qmake
        export QT_PLUGIN_PATH="/opt/homebrew/opt/qt/plugins"
        python${{ matrix.python-version }} -m pip install sip==6.6.2 pyqt-builder==1.12.0
        
    # Unzip PyQt5 files for macOS
    - name: Unzip PyQt5 files for macOS
      if: matrix.os == 'macos-latest'
      run: |
          mkdir pyqt5_files
          curl -L -o pyqt5_files.part1.rar https://raw.githubusercontent.com/MariemJelassi/AL-Codon-Counter-1.0/main/pyqt5_files.part1.rar
          curl -L -o pyqt5_files.part2.rar https://raw.githubusercontent.com/MariemJelassi/AL-Codon-Counter-1.0/main/pyqt5_files.part2.rar
          curl -L -o pyqt5_files.part3.rar https://raw.githubusercontent.com/MariemJelassi/AL-Codon-Counter-1.0/main/pyqt5_files.part3.rar
          unar pyqt5_files.part1.rar -o pyqt5_files/
          unar pyqt5_files.part2.rar -o pyqt5_files/
          unar pyqt5_files.part3.rar -o pyqt5_files/
          
    # Install PyQt5 from local files for macOS
    - name: Install PyQt5 from local files for macOS
      if: matrix.os == 'macos-latest'
      run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/pyqt5_files
          echo "Installing PyQt5 from local files..."
          ls pyqt5_files  # List the contents of the pyqt5_files directory
          python${{ matrix.python-version }} -m pip install --no-index --find-links=pyqt5_files PyQt5==5.15.4
          echo "PyQt5 installation complete."
    # Install dependencies FOR Windows
    - name: Install dependencies FOR Windows
      if: matrix.os == 'windows-latest'
      run: |
         choco install visualstudio2019buildtools
         choco install visualstudio2019-workload-vctools
         choco install mingw
         choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
         choco install 7zip
         choco install qt5-sdk
         python -m pip install --upgrade pip setuptools==58.0.4 wheel
         python -m pip install numpy==1.21.0 pandas==1.3.0 PyQt5-sip==12.9.0   
         if (Test-Path requirements.txt) { python -m pip install -r requirements.txt }

    # Install PyQt5 from local files For Windows
    - name: Install PyQt5 from local files  For Windows
      if: runner.os == 'Windows'
      run: |
           curl -L -o pyqt5_files.part1.rar https://raw.githubusercontent.com/MariemJelassi/AL-Codon-Counter-1.0/main/pyqt5_files.part1.rar
           curl -L -o pyqt5_files.part2.rar https://raw.githubusercontent.com/MariemJelassi/AL-Codon-Counter-1.0/main/pyqt5_files.part2.rar
           curl -L -o pyqt5_files.part3.rar https://raw.githubusercontent.com/MariemJelassi/AL-Codon-Counter-1.0/main/pyqt5_files.part3.rar
           mkdir pyqt5_files
           choco install 7zip
           7z x pyqt5_files.part1.rar -opyqt5_files/
           7z x pyqt5_files.part2.rar -opyqt5_files/
           7z x pyqt5_files.part3.rar -opyqt5_files/
           $env:PYTHONPATH = "$env:PYTHONPATH;$PWD\pyqt5_files"
           python -m pip install --no-index --find-links=pyqt5_files PyQt5
    
    # Install Inno Setup FOR Windows
    # ---> Install Inno Setup FOR Windows
    - name: Install Inno Setup FOR Windows
      if: matrix.os == 'windows-latest'
      run: choco install innosetup 
    # ---> Find Inno Setup Path FOR Windows
    - name: Find Inno Setup Path FOR Windows
      if: matrix.os == 'windows-latest'
      id: innosetup
      run: |
         $path = 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe'
         echo "::set-output name=path::$path"  
    # Ensure dist directory exists for Windows
    - name: Ensure dist directory exists for Windows
      if: matrix.os == 'windows-latest'
      run: |
            mkdir -p dist
    
    # Build executable for Windows
    - name: Build executable for Windows
      if: matrix.os == 'windows-latest'
      run: |
        pip install pyinstaller
        if (Test-Path 'AL_CODON_APP.spec') {pyinstaller AL_CODON_APP.spec} else {pyinstaller --onefile --windowed --name AL_CODON_APP interface_AL_Counter.py}
    # ---> Create installer using Inno Setup 
    - name: Create installer using Inno Setup
      if: matrix.os == 'windows-latest'
      run: |
           $appPath = Resolve-Path 'AL_CODON_APP.iss'
           & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' $appPath
    # Build executable for macOS
    - name: Build executable for macOS
      if: matrix.os == 'macos-latest'
      run: |
        chmod +x build_mac.sh
        ./build_mac.sh

    # Build executable for Linux
    - name: Install pyinstaller and makeself for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
         sudo apt-get update
         sudo apt-get install -y makeself
         python -m pip install pyinstaller
         
    - name: Build executable for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
         chmod +x build_linux.sh
         ./build_linux.sh
         
    # Upload artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: built-application-${{ matrix.os }}-${{ matrix.architecture }}-python-${{ matrix.python-version }}
        path: |
          dist/*
          build/*.run
          build/*.pkg
